#!/usr/bin/perl
use strict;

use Getopt::Long;
use Pod::Usage;

######################################################################
# Prelude
######################################################################

# Yes I know about autoconf ... and autoconf sux.

# We do not check for the following programs; we assume they are standard:
# - binutils, gcc, as, ld, the GNU toolchain
# - make, perl, bash
# - diffutils, fileutils, findutils, grep, patchutils, sh-utils

# - TODO findutils ?? need good gnu find, not macos find
#   which adds some extra '//' in paths which bothers pfff
# - STILL? sharutils, for obrowser/ocsigen  use of uuencode

# If want to run the tests need also:
# - swipl
# - javac 

my $project = 
    "pfff";
my $projectcmdline = 
    "./pfff -dump_php demos/foo.php";

######################################################################
# Options
######################################################################

my $prefix="/usr/local";

my $bt=0;

my $visual=1; # cairo, codemap
my $graphics=0; # X11 graphics.cma
my $gui=1; # gtk, pfff_browser

my $opt= ""; # ocamlc.opt ?
my $ocamlc_flags = ""; #ocamlc -?
my $ocaml_version = 3112;

my $facebook=0; 

my $man = 0;
my $help = 0;

# See http://perldoc.perl.org/Getopt/Long.html
# coupling: if add options here, add an explanation at the bottom of this file
#  too. Later you may also add something in the documentation latex file
#  (or use LP).
GetOptions (
    "prefix=s" => \$prefix,

    "bt!" => \$bt,

    "visual!" => \$visual,
    "gui!" => \$gui,
    "graphics!" => \$graphics,

    "with-all" => sub { 
        $facebook = 0;
        $gui = 1; $visual = 1; 
        #$graphics = 1; conflict when $visual
    },

    "facebook" => sub { 
        $facebook = 1;
        $gui = 0; $visual = 0; #really ?
    },

    'help|?' => \$help, 
    'man' => \$man
    ) or pod2usage(2);
    #or die "$0: GetOptions: $!";

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my $src="$prefix/share/$project";

# Dependencies:
if ($visual) { $gui = 1; }
if ($facebook) { }

######################################################################
# Side effects
######################################################################

######################################################################
# Helpers
######################################################################
BEGIN { die "need Perl 5 or greater" if $] < 5 ; }

#use Common;
sub pr2 { print STDERR "@_\n" }
sub cat { 
    my ($what) = @_;
    my @list;
    open(TMP, $what);
    while(<TMP>) { push @list, "$_"; }
    \@list;
}
sub notb   { !$_[0] }
sub mapf   { my ($f, $xs) = @_; [ map { &$f($_) } @{$xs} ] }
sub plural { my ($e) = @_; if ($e > 1) { "s" } else { "" } }

sub check_config { my ($command, $expect, $msggood, $msgbad) = @_;
    my $error = 0;
		   
    my $full = cat($command);
    my $res = join(" ", @{$full});
#	       pr2 $res;
    if(notb($res =~ $expect)) { $error++; pr2 "!!!! $msgbad !!!!"; }
    else { pr2 $msggood }
    return $error;
}

sub show_error_msg_and_exit_if_error {
    my ($error) = @_;
    if($error) {
        pr2 "
----------------------------------------------------------------------
!!!! There seems to have a problem, we have found a missing program.
Have a look at install.txt and the install_xxx.txt corresponding to your
OS.!!!!
----------------------------------------------------------------------
";
        exit 1;
    }
#plural($error) . ".
#" .
#" . (($error > 1) ? "Some of those packages" : "This package") . 
#    " may be installed by picking " . ($error > 1 ? "them" : "it") . 
#    " in $project-dependencies.tgz available
#on the $project website. !!!!
}

sub show_missing_package_error_msg {
    my ($error2) = @_;
    pr2 "
----------------------------------------------------------------------
!!!! You can try to compile and test $project, 
but some features or plugins may be missing. !!!!\n
We have found $error2 missing package" . plural($error2) . ". " . 
#(($error2 > 1) ? "Some of those packages" : "This package") . 
#" may be installed 
#by picking " . ($error2 > 1 ? "them" : "it") . 
#" in $project-dependencies.tgz available on the $project website.
#";
"
Have a look at the install_xxx.txt corresponding to your OS. 
";
}

######################################################################
# Let's go
######################################################################

pr2 "Checking your configuration.\n";

my $error = 0;
my $error2 = 0;

my $arch = `uname`;

#---------------------------------------------------------------------
# Compilers and runtimes
#---------------------------------------------------------------------
# We need 3.12 because I use the forall 'a. new typing feature 
# as well as the '_' pattern in records (in my code but also in lib-sexp/)
# We need 4.00 for codegraph for ocaml code using the .cmt
# We need 4.01 for changes in the .cmt format
$error += 
    check_config("echo \"1;;\\n\" | ocaml |",
                 "(Objective|OCaml)(.*) ([34]\.*.*)",
                 "OCaml (the wonderful language) is present.",
                 "The program ocaml is missing or is not a good version. We need at least 4.01",
                 );
show_error_msg_and_exit_if_error($error);

my $command = "echo \"1;;\\n\" | ocaml |";
my $full = cat($command);
my $res = join(" ", @{$full});
if ($res =~ /(Objective|OCaml)(.*) ([34])\.([0-9]+).([0-9]+)/) {
    my $major = $3;
    my $minor = $4;
    my $other = $5;
    $ocaml_version = $major * 1000 + $minor * 10 + $other;
} else {
    die "wrong version of ocaml";
}

#---------------------------------------------------------------
# Developers tools
#---------------------------------------------------------------

pr2 "";

my $MAKE_PROGRAM = "make";
if($arch =~ /FreeBSD/) {
  $MAKE_PROGRAM = "gmake";
}

my $BREW_PROGRAM = "";
if($arch =~ /Darwin/) {
  $BREW_PROGRAM = `which brew`;
}

$error += check_config(
  "$MAKE_PROGRAM -v 2>&1 |grep --colour=never Make|",
  "GNU Make 3\.[0-9]+", #version 3.81
  "make (gnu version) is present.",
  "The program gnu make is missing or is not a good version.
We need  3.XX",
);
show_error_msg_and_exit_if_error($error);

#---------------------------------------------------------------------
# More developers tools
#---------------------------------------------------------------------

# The OPTBIN variable is here to allow to use ocamlc.opt instead of
# ocaml, when it is available, which speeds up compilation. So
# if you want the fast version of the ocaml chain tools, set this var
# or setenv it to \".opt\" in your startup script.
# todo: detect if possible?
$opt = ".opt";

# -bin-annot is for codegraph, it needs ocaml 4.00,
# -absname is for tuareg mode under my mac, it also needs ocaml 4.00
$ocamlc_flags="-bin-annot -absname";

#---------------------------------------------------------------------
# Librairies
#---------------------------------------------------------------------

# if darwin or cygwin then could just modify this variable ? enough ?
my $prefix_distrib = "/usr";

if( ($arch =~ /FreeBSD/) || (($arch =~ /Darwin/) && ($BREW_PROGRAM)) ) {
    $prefix_distrib = "/usr/local";
} elsif ($arch =~ /Darwin/) {
    $prefix_distrib = "/opt/local";
}


# The default ocamlgraph configure generate Makefiles that uses some -pack
# and certain module names like Graph that conflicts with other pfff modules
# so right now the Makefile is hand-crafted.

if($gui) {
    pr2 "";
    pr2 "Configuring ocamlgtk";
    my $err = system("cd external/ocamlgtk; ./configure");
    if ($err) { $gui = 0; $error2++; }
}

if($visual) {
    pr2 "";
    pr2 "Configuring ocamlcairo";
    my $err = system("cd external/ocamlcairo; 
            LABLGTKDIR=../../ocamlgtk/src ./configure --with-gtk");
    if ($err) { $visual = 0; $error2++; }
}

######################################################################
# Generate config files (platform/portability issues)
######################################################################

######################################################################
# Generate globals files (features issues)
######################################################################

######################################################################
# Diagnostic 
######################################################################

if($error2) { 
    show_missing_package_error_msg($error2);
} else {
    pr2 "
All seems fine for $project.
";
}

pr2 "
----------------------------------------------------------------------
To compile $project type:
  \$ $MAKE_PROGRAM depend
  \$ $MAKE_PROGRAM 

Then, to test $project simply type:
  \$ $projectcmdline

If you want to use the analysis framework and code visualization tool
see install.txt or type ./configure --help
----------------------------------------------------------------------
";

######################################################################
# Generating the configuration
######################################################################

pr2 "$project target prefix: $prefix (you can use --prefix to override it)";
pr2 "Generating Makefile.config (BT=$bt, GUI=$gui, VISUAL=$visual)";
pr2 " (see also configure --help)";
open(CONFIG, ">Makefile.config");
print CONFIG "# autogenerated by configure

# Where to install the binary
BINDIR=$prefix/bin

# Where to install the man pages
MANDIR=$prefix/man

# Where to install the lib
LIBDIR=$prefix/lib

# Where to install the configuration files
SHAREDIR=$src

# Common features, cf commons/Makefile
FEATURE_SEXP_BUILTIN_COMMONS=1
FEATURE_JSON_BUILTIN_COMMONS=1
FEATURE_XML_BUILTIN_COMMONS=1

# not worth it, because does not work well for native code
#FEATURE_SYSLIB_BUILTIN_COMMONS=1

# Features
FEATURE_BACKTRACE=$bt

FEATURE_GUI=$gui
FEATURE_GRAPHICS=$graphics
FEATURE_VISUAL=$visual

FEATURE_FACEBOOK=$facebook

OPTBIN=$opt
OCAMLCFLAGS_EXTRA=$ocamlc_flags
OCAMLVERSION=$ocaml_version
";


pr2 "Generating commons/features.ml";
`cpp -DFEATURE_GUI=$gui -DFEATURE_BACKTRACE=$bt commons/features.ml.in > commons/features.ml`;

pr2 "Generating globals/config_pfff.ml";
`perl -p -e 's#Not_found1.\*#Not_found->\\\"$src\\\"#' globals/config_pfff.ml.in > globals/config_pfff.ml`;
if($facebook) {
    my ($server) = `cat facebook/pfff_logger.config`;
    `perl -p -i -e 's#Not_found2.\*#Not_found-> Some \\\"$server\\\"#' globals/config_pfff.ml`;
}
`perl -p -i -e 's#Not_found[0-9]#Not_found#' globals/config_pfff.ml`;

if($error || $error2) { 
    pr2 "!!Problems during ./configure!!";
}

######################################################################
# Documentation
######################################################################

# TODO add docs for -fb ?

__END__

=head1 NAME

configure - setting compilation options for pfff

=head1 SYNOPSIS

configure [options] [--prefix=/path/to/install]

Options are:
--prefix
--[no]bt
--[no]gui
--[no]visual
--with-all
--facebook

=head1 OPTIONS

=over 8






=item B<-help>

Print a brief help message and exits.

=item B<-man>

Prints the manual page and exits.

=back

=head1 DESCRIPTION

B<This program> will read command line options and generate
a B<Makefile.config> and other files to set the compilation
environment for pfff.

=cut
