
\section{Why another PHP parser ?} 
%yet another ? hmm on n'en est pas la quand meme

%dup: readme.txt
\pfff (PHP Frontend For Fun) is mainly an OCaml API to write static analysis
or style-preserving source-to-source transformations such as refactorings
on PHP source code. It is inspired by a similar tool for C called
Coccinelle~\cite{coccinelle-eurosys, coccinelle-website}.
\fbnote{and maybe one day HPHP2 \ldots}

The goal of \pfff is to parse the code as-is, and to represent it
internally as-is. We thus maintain in the Abstract Syntax Tree (AST)
as much information as possible so that one can transform this AST and
unparse it in a new file while preserving the coding style of the
original file. \pfff preserves the whitespaces, newlines, indentation,
and comments from the original file. 
\t XHP
The \pfff abstract syntax tree is thus in
fact more a Concrete Syntax Tree 
(cf [[parsing_php/ast_php.mli]] and Chapter~\ref{chapter:ast}).
\n same goal that Yacfe/coccinelle, but simpler because no ugly CPP

There are already multiple parsers for PHP:
\begin{itemize}
  \item The parser included in the official Zend PHP distribution. 
    This includes a PHP tokenizer that is accessible through PHP, see 
    \url{http://www.php.net/manual/en/tokenizer.examples.php}.
    \fbnote{This tokenizer is used by Mark Slee [[www/flib/_bin/checkModule]]
    PHP script.
    }
    % also reflection library
  \item The parser in HPHP source code, derived mostly from the previous
        parser.
  \item The parser in PHC source code.
  \item The parser in Lex-pass, a PHP refactoring tool by Daniel Corson.
  \iffacebook
  \item Partial parser hacks (ab)using the PHP tokenizer.
    \fbnote{For instance [[www/scripts/php_parser/]], written by Lucas Nealan.}
  \fi
\end{itemize}

Most of those parsers are written in C/C++ using Lex and Yacc (actually
Flex/Bison). The one in Lex-pass is written in Haskell using parser
combinators.

I decided to write yet another PHP parser, in OCaml, because I think
OCaml is a better language to write compilers or static analysis tools
(for bugs finding, refactoring assistance, type inference, etc)
and that writing a PHP parser is the first step in developing
such tools for PHP.

%dup: wiki page
%Also need from compilers and static/refactoring/visualisation tools are 
% different. For instance can not use hphp, because call xhp, which remove
% comments. Also they simplify AST. This makes sense in compiler context,
% you want a simpler world. So it's ok to not put everything in compiler.
% in C there is gcc, but lots of tools outside gcc (like CiL, berkeley,
% SLAM, msr, coccinelle, lip6) which do not use gcc because too complicated.
% BTW they are all coded in OCaml or F# :) which confirms my choice for OCaml
%Different needs, different tools. Cf my treemap/gui, could have done it
% via hphp ? maybe, but would have required change HPHP frontend, which
% would uselessly complicate the compiler. SEPARATION of concern is good.

Note that as there is a Lex and Yacc for OCaml (called \cmd{ocamllex}
and \cmd{ocamlyacc}), I was able to copy-paste most of the PHP Lex and
Yacc specifications from the official PHP parser 
(see \f{pfff/docs/official-grammar/}). It took me about a week-end
to write the first version of \pfff.
\l there was no handling of interpolated
\l strings, XHP, and a few other constructs, but it was able to parse
\l already 95? percent of www

%- 1 day to realize phpsa was not good enough
%- 3h porting official grammar
%- 3h porting official lexer (first part)
%- 10h making ast (but at the same time reorganize the grammar, and try
%      to understand php)
%- 3h get sexp_of_xxx and visitor, using and tweaking ocamltarzan

\l phpsa parser in OCaml, but not complete 


\section{Features} 

Here is a list of the main features provided by \pfff:
\begin{itemize}
  \item A full-featured PHP AST using OCaml powerful 
    Algebric Data Types (see 
    \url{http://en.wikipedia.org/wiki/Algebraic_data_type})

  \item Position information for all tokens, in the leaves of the AST
    \t as well as comments kept into the AST.
 \t item Parsing of XHP extensions
  \item Visitors genertor
  \item Pretty printing of the AST data structures
  \item Support for calling PHP preprocessors (e.g. XHP)
  \item Partial support of XHP extensions directly into the AST
    (by not calling the XHP preprocessor but parsing as-is XHP files)
    \fbnote{really partial for the moment}
\end{itemize}

Note that this manual documents only the parser frontend part of 
\pfff (the \f{pfff/parsing\_php/} directory). Another manual
describes the static analysis features of \pfff
(the \f{pfff/analysis\_php/} directory) including support
for control-flow and data-flow graphs, 
caller/callee graphs, 
module dependencies, 
type inference, 
source-to-source transformations, 
PHP code pattern matching,
etc.

\section{Copyright} 

The source code of \pfff is governed by the following copyright:
<<Facebook copyright>>=
(* Yoann Padioleau
 * 
 * Copyright (C) 2009-2011 Facebook
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 *)
@ 

\ifwantrepetitivecode
<<Facebook copyright2>>=
/* Yoann Padioleau
 * 
 * Copyright (C) 2009-2010 Facebook
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * version 2.1 as published by the Free Software Foundation, with the
 * special exception on linking described in file license.txt.
 * 
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the file
 * license.txt for more details.
 */
@ 
\fi

%was <GPL copyright boilerplate> before
%could \verbatiminput{copyright.txt}

This manual is copyright \copyright{} 2009-2010 Facebook,
and distributed under the terms of the 
GNU Free Documentation License version 1.3.

\section{Getting started} 

\subsection{Requirements}

%dup: install.txt

\pfff is an OCaml library so you need obviously to 
install both the runtime and the development libraries for OCaml.
Here is the list of packages needed by \pfff:
\begin{itemize}
  \item OCaml (see \url{http://caml.inria.fr/download.en.html})
  \item GNU make (see \url{http://www.gnu.org/software/make/})
\end{itemize}

Those packages are usually available on most Linux distributions.
For instance on CentOS simply do:
\begin{verbatim}
$ sudo yum install ocaml
$ sudo yum install make
\end{verbatim}
%sudo apt-get install ocaml
%emerge ocaml
%port install ocaml
\fbnote{OCaml is also already installed in  [[/home/pad/packages/bin]] so
you just have to [[source env.sh]] from the \pfff source directory}

\subsection{Compiling}

The source of \pfff are available at 
\url{http://padator.org/software/project-pfff/}.
\fbnote{The source of \pfff are currently managed by git. to git it just do
[[git clone /home/engshare/git/projects/pfff]]
}
%fun: to "git" it :)

%dup: readme.txt
To compile \pfff, see the instructions in [[install.txt]].
It should mainly consists in doing:
\t env.sh

%dup: install.txt
\begin{verbatim}
$ cd <pfff_src_directory>
$ ./configure
$ make depend
$ make
\end{verbatim}
\l configure flags

If you want to embed the parsing library in your own OCaml application,
you have just to copy the [[parsing_php/]] and
[[commons/]] directories
in your own project directory, add a
recursive make that goes in those directories, and then link
your application with the [[parsing_php/parsing_php.cma]] and 
[[commons/lib.cma]] library files (see also \f{pfff/demos/Makefile}).


\subsection{Quick example of use}
%dup: readme.txt
Once the source are compiled, 
you can test \pfff with:

\begin{verbatim}
$ cd demos/
$ ocamlc -I ../commons/ -I ../parsing_php/ \
    ../commons/lib.cma ../parsing_php/parsing_php.cma \
    show_function_calls1.ml -o show_function_calls 
$ ./show_function_calls foo.php
\end{verbatim}

You should then see on stdout some information on the function calls
in [[foo.php]] according to the code in 
[[show_function_calls1.ml]] (see Section~\ref{sec:simple-ex} for
a step-by-step explanation of this program).

\subsection{The [[pfff]] command-line tool}

The compilation process, in addition to building the [[parsing_php.cma]] 
library, also builds a binary program called [[pfff]] that can let you
evaluate among other things
how good the \pfff parser is. For instance, to test the parser on the 
PhpBB (\url{http://www.phpbb.com/},
a popular internet forum package written in PHP)
source code,
just do:

\begin{verbatim}
$ cd /tmp
$ wget http://d10xg45o6p6dbl.cloudfront.net/projects/p/phpbb/phpBB-3.0.6.tar.bz2
$ tar xvfj phpBB-3.0.6.tar.bz2
$ cd <pfff_src_directory>
$ ./pfff -parse_php /tmp/phpBB3/
\end{verbatim}

The [[pfff]] program should then iterate over all PHP source code files
([[.php]] files), and run the parser on each of those files. At the
end, [[pfff]] will output some statistics showing what \pfff was not
able to handle. On the PhpBB source code the messages are:

\begin{verbatim}
PARSING: /tmp/phpBB3/posting.php
PARSING: /tmp/phpBB3/cron.php
...
---------------------------------------------------------------
NB total files = 265; perfect = 265; =========> 100%
nb good = 183197,  nb bad = 0 =========> 100.000000%
...
\end{verbatim}
meaning \pfff was able to parse 100\% of the code.
\fbnote{For the moment \pfff parse 97\% of the code in [[www]].
The remaining errors are in files using XHP extensions that the parser
does not yet handle.
}

\section{Source organization} 

Table~\ref{tab:chapters-modules} presents a short description
of the modules in the [[parsing_php/]] directory
of the \pfff source distribution as well
as the corresponding chapters the module is 
\ifimplem
discussed.
\else
discussed when the module is part of the public API of \pfff. Indeed, 
some modules are only used as helpers for other modules; they do not provide
any services to the user.
\fi

%legend: TODO -> SEMI -> IN/DONE -> SPLITTED -> EXPLAINED

%$ ls *.mli
%SEMI ast_php.mli
%SEMI lib_parsing_php.mli
%SEMI parse_php.mli
%scope_php.mli
%SEMI sexp_ast_php.mli
%SEMI test_parsing_php.mli
%token_helpers_php.mli
%SEMI type_php.mli
%SEMI visitor_php.mli

%stuff with no .mli:
% SEMI flag_parsing_php.ml

%$ ls *.ml
%SEMI ast_php.ml
%SEMI lib_parsing_php.ml
%SEMI parse_php.ml
%scope_php.ml
%sexp_ast_php.ml
%SEMI test_parsing_php.ml
%token_helpers_php.ml
%type_php.ml
%visitor_php.ml

%other:
%SEMI lexer_php.mll
%SEMI parser_php.mly
% orig.mly

%cf also SRC in Makefile and SRCI

\begin{table*}[tbh!]
\begin{tabular}{lll}
\toprule
{\bf Function} & {\bf Chapter} & {\bf Modules} \\
\otoprule
Parser entry point 
       & \ref{chapter:parse-entry-point} & [[parse_php.mli]] \\
\midrule
\multirow{2}{*}{Abstract Syntax Tree} 
 & \ref{chapter:ast} & [[ast_php.mli]] \\
 & \ref{sec:annotations} & [[type_php.mli]], [[scope_php.mli]] \\
\midrule
Visitor & \ref{chapter:visitor} & [[visitor_php.mli]] \\
\midrule
\multirow{2}{*}{Unparsing}
          & \ref{sec:unparsing-sexp}         & [[sexp_ast_php.mli]] \\
          & \ref{sec:unparsing-json}         & [[json_ast_php.mli]] \\
          & \ref{sec:unparsing-preserving}   &      [[unparse_php.mli]] \\
%TODO and also implem chapter for unparsing-preserving
\midrule
\multirow{3}{*}{Other services}
 & \ref{section:lib-parsing} & [[lib_parsing_php.mli]] \\
 & \ref{section:flag-parsing} & [[flag_parsing_php.mli]] \\ 
 & \ref{section:test-parsing} & [[test_parsing_php.mli]] \\ 
\midrule
\multirow{5}{*}{Parser code}
        & \ifimplem \ref{chapter:implem-overview} \fi & [[parse_php.ml]] \\
        & \ifimplem \ref{chapter:lexer} \fi & [[lexer_php.mll]] (Lex specification))\\
        & \ifimplem \ref{section:token-helpers} \fi & [[token_helpers_php.ml]] \\
        & \ifimplem \ref{chapter:grammar} \fi & [[parser_php.mly]] (Yacc specification) \\
        & \ifimplem \ref{section:grammar-prelude} \fi & [[parser_php_mly_helper.ml]] \\
%
%
\midrule
\bottomrule
\end{tabular}
\caption{Chapters and modules}
\label{tab:chapters-modules}
\end{table*}

\section{API organization} 

Figure~\ref{fig:api-mli-graph} presents the graph of dependencies
between [[.mli]] files.

\begin{figure*}
\includegraphics[width=15cm]{Fig_graph_mli}
%height=7cm
\caption{API dependency graph between [[mli]] files}
\label{fig:api-mli-graph}
\end{figure*}

\section{Plan} 

\ifimplem
Part 1 explains the interface of \pfff, that is mainly the [[.mli]] files.
Part 2 explains the code, the [[.ml]] files.
\fi
\l .mll .mly lex/yacc

\section{About this document}

#include "About.tex.nw"
