package gnu.java.security;
class Registry {
  int GKR_CIPHER_AES_128_CBC;
  int GKR_CIPHER_AES_128_OFB;
  int GKR_HMAC_SHA_96;
  int GKR_HMAC_MD5_96;
  int GKR_HMAC_SHA_160;
  int GKR_HMAC_MD5_128;
  int GKR_CERTIFICATES;
  int GKR_PUBLIC_CREDENTIALS;
  int GKR_PRIVATE_KEYS;
  int GKR_MAGIC;
  int REUSE_FALSE;
  int REUSE_TRUE;
  int SERVER_AUTH_FALSE;
  int SERVER_AUTH_TRUE;
  int STRENGTH_LOW;
  int STRENGTH_MEDIUM;
  int STRENGTH_HIGH;
  int QOP_AUTH_CONF;
  int QOP_AUTH_INT;
  int QOP_AUTH;
  int SASL_HMAC_SHA_IALG;
  int SASL_HMAC_MD5_IALG;
  int SASL_SRP_MECHANISM;
  int SASL_PLAIN_MECHANISM;
  int SASL_CRAM_MD5_MECHANISM;
  int SASL_ANONYMOUS_MECHANISM;
  int SASL_BUFFER_MAX_LIMIT;
  int SASL_FOUR_BYTE_MAX_LIMIT;
  int SASL_TWO_BYTE_MAX_LIMIT;
  int SASL_ONE_BYTE_MAX_LIMIT;
  int SASL_CHANNEL_BINDING;
  int SASL_CALLBACK_HANDLER;
  int SASL_SERVER_NAME;
  int SASL_PROTOCOL;
  int SASL_AUTHORISATION_ID;
  int SASL_AUTH_INFO_PROVIDER_PKGS;
  int SASL_PASSWORD;
  int SASL_USERNAME;
  int SASL_PREFIX;
  int MAGIC_RAW_SRP_PRIVATE_KEY;
  int MAGIC_RAW_SRP_PUBLIC_KEY;
  int MAGIC_RAW_DH_PRIVATE_KEY;
  int MAGIC_RAW_DH_PUBLIC_KEY;
  int MAGIC_RAW_RSA_PKCS1V1_5_SIGNATURE;
  int MAGIC_RAW_RSA_PSS_SIGNATURE;
  int MAGIC_RAW_RSA_PRIVATE_KEY;
  int MAGIC_RAW_RSA_PUBLIC_KEY;
  int MAGIC_RAW_DSS_SIGNATURE;
  int MAGIC_RAW_DSS_PRIVATE_KEY;
  int MAGIC_RAW_DSS_PUBLIC_KEY;
  int DH_OID_STRING;
  int RSA_OID_STRING;
  int DSA_OID_STRING;
  int ASN1_ENCODING_ID;
  int PKCS8_ENCODING_ID;
  int X509_ENCODING_ID;
  int RAW_ENCODING_ID;
  int ASN1_ENCODING_SHORT_NAME;
  int PKCS8_ENCODING_SHORT_NAME;
  int X509_ENCODING_SORT_NAME;
  int RAW_ENCODING_SHORT_NAME;
  int ASN1_ENCODING;
  int PKCS8_ENCODING;
  int X509_ENCODING;
  int RAW_ENCODING;
  int TMMH16;
  int UMAC32;
  int UHASH32;
  int OMAC_PREFIX;
  int HMAC_NAME_PREFIX;
  int SRP_TLS_KA;
  int SRP_SASL_KA;
  int SRP6_KA;
  int ELGAMAL_KA;
  int DH_KA;
  int DSA_SIG;
  int RSA_PKCS1_V1_5_SIG;
  int RSA_PKCS1_V1_5_ENCODING;
  int RSA_PSS_SIG;
  int RSA_PSS_ENCODING;
  int RSA_SIG_PREFIX;
  int DSS_SIG;
  int DSA_KPG;
  int SRP_KPG;
  int DH_KPG;
  int RSA_KPG;
  int DSS_KPG;
  int FORTUNA_GENERATOR_PRNG;
  int FORTUNA_PRNG;
  int CSPRNG_PRNG;
  int PBKDF2_PRNG_PREFIX;
  int UMAC_PRNG;
  int MD_PRNG;
  int ICM_PRNG;
  int RC4_PRNG;
  int ARCFOUR_PRNG;
  int ISO10126_PAD;
  int TLS1_PAD;
  int SSL3_PAD;
  int EME_PKCS1_V1_5_PAD;
  int TBC_PAD;
  int PKCS7_PAD;
  int PKCS5_PAD;
  int EAX_MODE;
  int CFB_MODE;
  int CBC_MODE;
  int OFB_MODE;
  int ICM_MODE;
  int CTR_MODE;
  int ECB_MODE;
  int SHA_HASH;
  int SHA1_HASH;
  int SHA_1_HASH;
  int RIPEMD_160_HASH;
  int RIPEMD_128_HASH;
  int MD2_HASH;
  int MD4_HASH;
  int MD5_HASH;
  int HAVAL_HASH;
  int TIGER_HASH;
  int SHA512_HASH;
  int SHA384_HASH;
  int SHA256_HASH;
  int SHA160_HASH;
  int RIPEMD160_HASH;
  int RIPEMD128_HASH;
  int WHIRLPOOL_HASH;
  int DESEDE_KWA;
  int TRIPLEDES_KWA;
  int RIJNDAEL_KWA;
  int AES256_KWA;
  int AES192_KWA;
  int AES128_KWA;
  int AES_KWA;
  int KWA_PREFIX;
  int CAST_128_CIPHER;
  int CAST128_CIPHER;
  int DESEDE_CIPHER;
  int AES_CIPHER;
  int NULL_CIPHER;
  int CAST5_CIPHER;
  int TWOFISH_CIPHER;
  int TRIPLEDES_CIPHER;
  int SQUARE_CIPHER;
  int SERPENT_CIPHER;
  int RIJNDAEL_CIPHER;
  int KHAZAD_CIPHER;
  int DES_CIPHER;
  int BLOWFISH_CIPHER;
  int ANUBIS_CIPHER;
  int VERSION_STRING;
  int GNU_SASL;
  int GNU_CRYPTO;
  int GNU_SECURITY;
}
class Properties {
  int doRSABlinding;
  int checkForWeakKeys;
  int reproducible;
  int singleton;
  int props;
  int FALSE;
  int TRUE;
  int DO_RSA_BLINDING;
  int CHECK_WEAK_KEYS;
  int REPRODUCIBLE_PRNG;
  int PROPERTIES_FILE;
  int VERSION;
  int log;
}
class PolicyFile {
  int STATE_PERMS;
  int STATE_GRANT;
  int STATE_BEGIN;
  int cs2pc;
  int DEFAULT_USER_POLICY;
  int DEFAULT_POLICY;
  int fs;
  int prop;
  int logger;
}
class OID {
  int relative;
  int der;
  int strRep;
  int components;
  int serialVersionUID;
}
class Engine {
  int NO_ARGS;
  int MAX_ALIASES;
  int ALG_ALIAS;
}
