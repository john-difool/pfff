package org.objectweb.asm;
class Type {
  int len;
  int off;
  int buf;
  int sort;
  int DOUBLE_TYPE;
  int LONG_TYPE;
  int FLOAT_TYPE;
  int INT_TYPE;
  int SHORT_TYPE;
  int BYTE_TYPE;
  int CHAR_TYPE;
  int BOOLEAN_TYPE;
  int VOID_TYPE;
  int OBJECT;
  int ARRAY;
  int DOUBLE;
  int LONG;
  int FLOAT;
  int INT;
  int SHORT;
  int BYTE;
  int CHAR;
  int BOOLEAN;
  int VOID;
}
class Opcodes {
  int IFNONNULL;
  int IFNULL;
  int MULTIANEWARRAY;
  int MONITOREXIT;
  int MONITORENTER;
  int INSTANCEOF;
  int CHECKCAST;
  int ATHROW;
  int ARRAYLENGTH;
  int ANEWARRAY;
  int NEWARRAY;
  int NEW;
  int INVOKEINTERFACE;
  int INVOKESTATIC;
  int INVOKESPECIAL;
  int INVOKEVIRTUAL;
  int PUTFIELD;
  int GETFIELD;
  int PUTSTATIC;
  int GETSTATIC;
  int RETURN;
  int ARETURN;
  int DRETURN;
  int FRETURN;
  int LRETURN;
  int IRETURN;
  int LOOKUPSWITCH;
  int TABLESWITCH;
  int RET;
  int JSR;
  int GOTO;
  int IF_ACMPNE;
  int IF_ACMPEQ;
  int IF_ICMPLE;
  int IF_ICMPGT;
  int IF_ICMPGE;
  int IF_ICMPLT;
  int IF_ICMPNE;
  int IF_ICMPEQ;
  int IFLE;
  int IFGT;
  int IFGE;
  int IFLT;
  int IFNE;
  int IFEQ;
  int DCMPG;
  int DCMPL;
  int FCMPG;
  int FCMPL;
  int LCMP;
  int I2S;
  int I2C;
  int I2B;
  int D2F;
  int D2L;
  int D2I;
  int F2D;
  int F2L;
  int F2I;
  int L2D;
  int L2F;
  int L2I;
  int I2D;
  int I2F;
  int I2L;
  int IINC;
  int LXOR;
  int IXOR;
  int LOR;
  int IOR;
  int LAND;
  int IAND;
  int LUSHR;
  int IUSHR;
  int LSHR;
  int ISHR;
  int LSHL;
  int ISHL;
  int DNEG;
  int FNEG;
  int LNEG;
  int INEG;
  int DREM;
  int FREM;
  int LREM;
  int IREM;
  int DDIV;
  int FDIV;
  int LDIV;
  int IDIV;
  int DMUL;
  int FMUL;
  int LMUL;
  int IMUL;
  int DSUB;
  int FSUB;
  int LSUB;
  int ISUB;
  int DADD;
  int FADD;
  int LADD;
  int IADD;
  int SWAP;
  int DUP2_X2;
  int DUP2_X1;
  int DUP2;
  int DUP_X2;
  int DUP_X1;
  int DUP;
  int POP2;
  int POP;
  int SASTORE;
  int CASTORE;
  int BASTORE;
  int AASTORE;
  int DASTORE;
  int FASTORE;
  int LASTORE;
  int IASTORE;
  int ASTORE;
  int DSTORE;
  int FSTORE;
  int LSTORE;
  int ISTORE;
  int SALOAD;
  int CALOAD;
  int BALOAD;
  int AALOAD;
  int DALOAD;
  int FALOAD;
  int LALOAD;
  int IALOAD;
  int ALOAD;
  int DLOAD;
  int FLOAD;
  int LLOAD;
  int ILOAD;
  int LDC;
  int SIPUSH;
  int BIPUSH;
  int DCONST_1;
  int DCONST_0;
  int FCONST_2;
  int FCONST_1;
  int FCONST_0;
  int LCONST_1;
  int LCONST_0;
  int ICONST_5;
  int ICONST_4;
  int ICONST_3;
  int ICONST_2;
  int ICONST_1;
  int ICONST_0;
  int ICONST_M1;
  int ACONST_NULL;
  int NOP;
  int T_LONG;
  int T_INT;
  int T_SHORT;
  int T_BYTE;
  int T_DOUBLE;
  int T_FLOAT;
  int T_CHAR;
  int T_BOOLEAN;
  int ACC_DEPRECATED;
  int ACC_ENUM;
  int ACC_ANNOTATION;
  int ACC_SYNTHETIC;
  int ACC_STRICT;
  int ACC_ABSTRACT;
  int ACC_INTERFACE;
  int ACC_NATIVE;
  int ACC_TRANSIENT;
  int ACC_VARARGS;
  int ACC_BRIDGE;
  int ACC_VOLATILE;
  int ACC_SYNCHRONIZED;
  int ACC_SUPER;
  int ACC_FINAL;
  int ACC_STATIC;
  int ACC_PROTECTED;
  int ACC_PRIVATE;
  int ACC_PUBLIC;
  int V1_6;
  int V1_5;
  int V1_4;
  int V1_3;
  int V1_2;
  int V1_1;
}
class MethodWriter {
  int SIZE;
  int blockStack;
  int currentBlock;
  int maxStackSize;
  int stackSize;
  int computeMaxs;
  int resize;
  int cattrs;
  int lineNumber;
  int lineNumberCount;
  int localVarType;
  int localVarTypeCount;
  int localVar;
  int localVarCount;
  int lastHandler;
  int catchTable;
  int catchCount;
  int maxLocals;
  int maxStack;
  int code;
  int attrs;
  int ipanns;
  int panns;
  int ianns;
  int anns;
  int annd;
  int exceptions;
  int exceptionCount;
  int signature;
  int classReaderLength;
  int classReaderOffset;
  int descriptor;
  int desc;
  int name;
  int access;
  int cw;
  int next;
}
class MethodVisitor {
}
class MethodAdapter {
  int mv;
}
class Label {
  int pushed;
  int next;
  int successors;
  int maxStackSize;
  int beginStackSize;
  int srcAndRefPositions;
  int referenceCount;
  int resized;
  int position;
  int resolved;
  int line;
}
class Item {
  int next;
  int hashCode;
  int strVal3;
  int strVal2;
  int strVal1;
  int doubleVal;
  int floatVal;
  int longVal;
  int intVal;
  int type;
  int index;
}
class Handler {
  int next;
  int type;
  int desc;
  int handler;
  int end;
  int start;
}
class FieldWriter {
  int attrs;
  int ianns;
  int anns;
  int value;
  int signature;
  int desc;
  int name;
  int access;
  int cw;
  int next;
}
class FieldVisitor {
}
class Edge {
  int next;
  int successor;
  int stackSize;
}
class ClassWriter {
  int computeMaxs;
  int lastMethod;
  int firstMethod;
  int lastField;
  int firstField;
  int innerClasses;
  int innerClassesCount;
  int attrs;
  int ianns;
  int anns;
  int enclosingMethod;
  int enclosingMethodOwner;
  int sourceDebug;
  int sourceFile;
  int interfaces;
  int interfaceCount;
  int superName;
  int signature;
  int name;
  int access;
  int key3;
  int key2;
  int key;
  int threshold;
  int items;
  int pool;
  int index;
  int version;
  int cr;
  int UTF8;
  int NAME_TYPE;
  int DOUBLE;
  int LONG;
  int FLOAT;
  int INT;
  int STR;
  int IMETH;
  int METH;
  int FIELD;
  int CLASS;
  int TYPE;
  int WIDE_INSN;
  int MANA_INSN;
  int LOOK_INSN;
  int TABL_INSN;
  int IINC_INSN;
  int LDCW_INSN;
  int LDC_INSN;
  int LABELW_INSN;
  int LABEL_INSN;
  int ITFMETH_INSN;
  int FIELDORMETH_INSN;
  int TYPE_INSN;
  int IMPLVAR_INSN;
  int VAR_INSN;
  int SHORT_INSN;
  int SBYTE_INSN;
  int NOARG_INSN;
}
class ClassVisitor {
}
class ClassReader {
  int header;
  int maxStringLength;
  int strings;
  int items;
  int b;
}
class ClassAdapter {
  int cv;
}
class ByteVector {
  int length;
  int data;
}
class Attribute {
  int next;
  int value;
  int type;
}
class AnnotationWriter {
  int prev;
  int next;
  int offset;
  int parent;
  int bv;
  int named;
  int size;
  int cw;
}
class AnnotationVisitor {
}
