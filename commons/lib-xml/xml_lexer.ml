# 1 "xml_lexer.mll"
 (*
 * Xml Light, an small Xml parser/printer with DTD support.
 * Copyright (C) 2003 Nicolas Cannasse (ncannasse@motion-twin.com)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *)

open Lexing
open Xml_parser
open Dtd_types

type error =
	| EUnterminatedComment
	| EUnterminatedString
	| EIdentExpected
	| ECloseExpected
	| ENodeExpected
	| EAttributeNameExpected
	| EAttributeValueExpected
	| EUnterminatedEntity

type dtd_error =
	| EInvalidDTDDecl
	| EInvalidDTDTag
	| EDTDItemExpected
	| EInvalidDTDElement
	| EInvalidDTDAttribute

exception Error of error
exception DTDError of dtd_error

type pos = int * int * int * int

type dtd_decl =
	| DTDFile of string
	| DTDData of dtd

type dtd_item_type =
	| TElement
	| TAttribute

type token =
	| Tag of string * (string * string) list * bool
	| PCData of string
	| Endtag of string
	| DocType of (string * dtd_decl)
	| Eof

let last_pos = ref 0
and current_line = ref 0
and current_line_start = ref 0

let tmp = Buffer.create 200

let idents = Hashtbl.create 0

let _ = begin
	Hashtbl.add idents "gt;" ">";
	Hashtbl.add idents "lt;" "<";
	Hashtbl.add idents "amp;" "&";
	Hashtbl.add idents "apos;" "'";
	Hashtbl.add idents "quot;" "\"";
end

let init lexbuf =
	current_line := 1;
	current_line_start := lexeme_start lexbuf;
	last_pos := !current_line_start

let close lexbuf =
	Buffer.reset tmp

let pos lexbuf =
	!current_line ,	!current_line_start ,
	!last_pos ,
	lexeme_start lexbuf

let restore (cl,cls,lp,_) =
	current_line := cl;
	current_line_start := cls;
	last_pos := lp

let newline lexbuf =
	incr current_line;
	last_pos := lexeme_end lexbuf;
	current_line_start := !last_pos

let error lexbuf e =
	last_pos := lexeme_start lexbuf;
	raise (Error e)

let dtd_error lexbuf e =
	last_pos := lexeme_start lexbuf;
	raise (DTDError e)

# 110 "xml_lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\243\255\244\255\001\000\000\000\008\000\010\000\012\000\
    \255\255\011\000\017\000\250\255\000\000\001\000\000\000\000\000\
    \002\000\000\000\000\000\000\000\001\000\253\255\005\000\000\000\
    \001\000\001\000\001\000\252\255\251\255\247\255\020\000\015\000\
    \255\255\006\000\252\255\253\255\003\000\255\255\013\000\254\255\
    \024\000\252\255\253\255\014\000\255\255\254\255\002\000\251\255\
    \000\000\254\255\008\000\015\000\253\255\044\000\001\000\073\000\
    \254\255\073\000\254\255\236\000\255\255\058\001\136\001\254\255\
    \214\001\016\000\254\255\255\255\034\000\026\000\255\255\254\255\
    \036\002\254\255\114\002\104\000\253\255\187\000\105\000\188\000\
    \191\000\254\255\255\255\075\000\252\255\253\255\024\000\255\255\
    \254\255\020\000\252\255\253\255\076\000\255\255\254\255\118\000\
    \252\255\253\255\001\000\009\000\034\000\026\000\030\000\040\000\
    \255\255\025\000\026\000\051\000\054\000\254\255\130\000\253\255\
    \254\255\255\255\039\000\255\255\197\000\199\000\254\255\255\255\
    \072\000\254\255\255\255\139\000\253\255\004\000\008\000\011\000\
    \255\255\140\000\255\255\146\000\253\255\119\000\128\000\136\000\
    \136\000\145\000\138\000\133\000\255\255\134\000\148\000\152\000\
    \145\000\146\000\254\255\194\000\252\255\253\255\155\000\155\000\
    \146\000\255\255\156\000\153\000\149\000\254\255\177\000\254\255\
    \255\255\178\000\254\255\255\255\228\002\243\255\050\003\245\255\
    \246\255\247\255\161\000\249\255\250\255\251\255\252\255\253\255\
    \233\000\255\255\176\000\176\000\180\000\163\000\183\000\248\255\
    \106\003\252\255\253\255\172\000\182\000\186\000\169\000\189\000\
    \255\255\171\000\181\000\186\000\197\000\189\000\254\255\137\003\
    \254\255\215\003\237\000\253\255\254\255\255\255\235\000\249\255\
    \172\002\254\255\255\255\202\000\199\000\196\000\206\000\196\000\
    \194\000\210\000\212\000\227\000\229\000\253\255\218\000\223\000\
    \254\000\003\001\006\001\252\255\244\000\047\001\050\001\251\255\
    \049\001\055\001\036\001\046\001\065\001\250\255\161\001\253\255\
    \254\255\255\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\010\000\009\000\007\000\001\000\001\000\
    \255\255\006\000\007\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\002\000\001\000\
    \255\255\255\255\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\255\255\255\255\255\255\255\255\
    \003\000\255\255\000\000\255\255\255\255\003\000\002\000\000\000\
    \255\255\255\255\255\255\001\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\002\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\002\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\255\255\
    \255\255\255\255\255\255\255\255\003\000\255\255\255\255\255\255\
    \255\255\255\255\003\000\003\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\001\000\255\255\003\000\002\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\002\000\001\000\255\255\
    \255\255\001\000\255\255\255\255\255\255\002\000\002\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\003\000\003\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\011\000\255\255\
    \255\255\255\255\012\000\255\255\255\255\255\255\255\255\255\255\
    \001\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\003\000\003\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \006\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_default = 
   "\003\000\000\000\000\000\003\000\255\255\255\255\255\255\003\000\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\000\000\000\000\255\255\255\255\
    \000\000\034\000\000\000\000\000\255\255\000\000\255\255\000\000\
    \041\000\000\000\000\000\255\255\000\000\000\000\050\000\000\000\
    \255\255\000\000\050\000\255\255\000\000\055\000\255\255\055\000\
    \000\000\058\000\000\000\255\255\000\000\255\255\063\000\000\000\
    \255\255\066\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \073\000\000\000\255\255\076\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\084\000\000\000\000\000\255\255\000\000\
    \000\000\090\000\000\000\000\000\255\255\000\000\000\000\096\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\000\000\111\000\000\000\
    \000\000\000\000\255\255\000\000\255\255\255\255\000\000\000\000\
    \121\000\000\000\000\000\124\000\000\000\255\255\255\255\255\255\
    \000\000\255\255\000\000\132\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\148\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\159\000\000\000\
    \000\000\162\000\000\000\000\000\165\000\000\000\255\255\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\255\255\000\000\
    \185\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\200\000\
    \000\000\255\255\203\000\000\000\000\000\000\000\207\000\000\000\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\239\000\000\000\
    \000\000\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\007\000\008\000\255\255\049\000\006\000\255\255\000\000\
    \037\000\010\000\255\255\006\000\009\000\007\000\255\255\006\000\
    \031\000\006\000\010\000\000\000\031\000\031\000\032\000\000\000\
    \007\000\031\000\044\000\029\000\056\000\126\000\004\000\255\255\
    \010\000\012\000\006\000\009\000\007\000\013\000\028\000\031\000\
    \038\000\010\000\255\255\036\000\031\000\127\000\255\255\009\000\
    \128\000\255\255\088\000\093\000\005\000\255\255\001\000\255\255\
    \009\000\024\000\026\000\022\000\015\000\017\000\021\000\011\000\
    \255\255\023\000\255\255\039\000\045\000\052\000\067\000\016\000\
    \020\000\069\000\054\000\255\255\018\000\025\000\255\255\043\000\
    \071\000\019\000\105\000\014\000\027\000\051\000\100\000\048\000\
    \070\000\024\000\026\000\022\000\101\000\255\255\102\000\103\000\
    \255\255\023\000\255\255\104\000\106\000\087\000\107\000\255\255\
    \092\000\078\000\080\000\094\000\088\000\025\000\059\000\059\000\
    \108\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\109\000\115\000\255\255\122\000\255\255\
    \078\000\080\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\113\000\077\000\079\000\086\000\
    \094\000\112\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\079\000\079\000\099\000\125\000\
    \080\000\098\000\130\000\141\000\135\000\136\000\117\000\118\000\
    \117\000\097\000\117\000\133\000\117\000\137\000\138\000\134\000\
    \139\000\140\000\142\000\079\000\079\000\082\000\082\000\080\000\
    \143\000\144\000\081\000\081\000\145\000\117\000\146\000\117\000\
    \154\000\152\000\149\000\153\000\155\000\156\000\157\000\160\000\
    \163\000\178\000\176\000\179\000\180\000\181\000\176\000\182\000\
    \183\000\193\000\189\000\190\000\079\000\191\000\192\000\194\000\
    \002\000\255\255\047\000\151\000\195\000\196\000\035\000\150\000\
    \255\255\176\000\197\000\198\000\255\255\210\000\208\000\232\000\
    \228\000\222\000\209\000\215\000\091\000\216\000\205\000\217\000\
    \042\000\061\000\061\000\218\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\219\000\060\000\
    \220\000\221\000\223\000\224\000\255\255\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\225\000\
    \226\000\255\255\227\000\085\000\229\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\204\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\230\000\060\000\231\000\233\000\
    \234\000\235\000\236\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\237\000\000\000\000\000\
    \000\000\000\000\000\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\064\000\000\000\000\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\241\000\000\000\119\000\000\000\000\000\
    \240\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\000\000\000\000\000\000\000\000\064\000\
    \000\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\000\000\000\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\000\000\000\000\000\000\000\000\000\000\000\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\000\000\000\000\000\000\000\000\064\000\000\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\074\000\000\000\000\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\000\000\
    \000\000\000\000\000\000\074\000\000\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \000\000\000\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\000\000\000\000\000\000\
    \000\000\074\000\000\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\176\000\177\000\000\000\
    \211\000\176\000\212\000\000\000\000\000\213\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\214\000\000\000\
    \000\000\000\000\000\000\000\000\176\000\000\000\000\000\170\000\
    \000\000\000\000\000\000\000\000\175\000\174\000\169\000\168\000\
    \173\000\166\000\000\000\000\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\000\000\
    \000\000\000\000\172\000\167\000\000\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\000\000\
    \000\000\000\000\000\000\166\000\000\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \171\000\000\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\000\000\000\000\000\000\
    \000\000\166\000\186\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\188\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\201\000\000\000\
    \187\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\000\000\000\000\000\000\000\000\
    \201\000\000\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\000\000\000\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\000\000\000\000\000\000\000\000\201\000\000\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\003\000\046\000\000\000\003\000\255\255\
    \033\000\005\000\050\000\006\000\009\000\007\000\007\000\006\000\
    \031\000\007\000\010\000\255\255\031\000\030\000\030\000\255\255\
    \000\000\030\000\040\000\004\000\054\000\125\000\000\000\003\000\
    \005\000\005\000\006\000\009\000\007\000\012\000\013\000\031\000\
    \036\000\010\000\007\000\033\000\030\000\126\000\053\000\005\000\
    \127\000\053\000\086\000\089\000\000\000\003\000\000\000\003\000\
    \010\000\023\000\025\000\014\000\012\000\016\000\020\000\005\000\
    \007\000\022\000\007\000\038\000\043\000\051\000\065\000\015\000\
    \019\000\068\000\053\000\055\000\017\000\024\000\055\000\040\000\
    \069\000\018\000\098\000\012\000\026\000\048\000\099\000\046\000\
    \068\000\023\000\025\000\014\000\100\000\050\000\101\000\102\000\
    \053\000\022\000\053\000\103\000\105\000\083\000\106\000\055\000\
    \089\000\075\000\078\000\092\000\086\000\024\000\057\000\057\000\
    \107\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\108\000\114\000\055\000\120\000\055\000\
    \075\000\078\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\110\000\075\000\078\000\083\000\
    \092\000\110\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\057\000\057\000\057\000\057\000\
    \057\000\057\000\057\000\057\000\077\000\079\000\095\000\123\000\
    \080\000\095\000\129\000\133\000\134\000\135\000\116\000\116\000\
    \117\000\095\000\116\000\131\000\117\000\136\000\137\000\131\000\
    \138\000\139\000\141\000\077\000\079\000\077\000\079\000\080\000\
    \142\000\143\000\077\000\079\000\144\000\116\000\145\000\117\000\
    \150\000\151\000\147\000\152\000\154\000\155\000\156\000\158\000\
    \161\000\170\000\176\000\178\000\179\000\180\000\176\000\181\000\
    \182\000\187\000\188\000\189\000\080\000\190\000\191\000\193\000\
    \000\000\003\000\046\000\147\000\194\000\195\000\033\000\147\000\
    \050\000\176\000\196\000\197\000\007\000\206\000\206\000\211\000\
    \212\000\213\000\206\000\214\000\089\000\215\000\202\000\216\000\
    \040\000\059\000\059\000\217\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\218\000\059\000\
    \219\000\220\000\222\000\223\000\053\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\224\000\
    \225\000\055\000\226\000\083\000\228\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\059\000\
    \059\000\059\000\059\000\059\000\059\000\059\000\059\000\061\000\
    \061\000\202\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\229\000\061\000\230\000\232\000\
    \233\000\234\000\235\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\236\000\255\255\255\255\
    \255\255\255\255\255\255\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\062\000\255\255\255\255\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\238\000\255\255\116\000\255\255\255\255\
    \238\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\255\255\255\255\255\255\255\255\062\000\
    \255\255\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
    \062\000\062\000\062\000\064\000\255\255\255\255\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\255\255\255\255\255\255\255\255\255\255\255\255\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\255\255\255\255\255\255\255\255\064\000\255\255\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \064\000\072\000\255\255\255\255\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\255\255\
    \255\255\255\255\255\255\072\000\255\255\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\072\000\
    \072\000\072\000\072\000\072\000\072\000\072\000\072\000\074\000\
    \255\255\255\255\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\255\255\255\255\255\255\
    \255\255\074\000\255\255\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\164\000\164\000\255\255\
    \208\000\164\000\208\000\255\255\255\255\208\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\208\000\255\255\
    \255\255\255\255\255\255\255\255\164\000\255\255\255\255\164\000\
    \255\255\255\255\255\255\255\255\164\000\164\000\164\000\164\000\
    \164\000\164\000\255\255\255\255\164\000\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\255\255\
    \255\255\255\255\164\000\164\000\255\255\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\255\255\
    \255\255\255\255\255\255\164\000\255\255\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\164\000\
    \164\000\164\000\164\000\164\000\164\000\164\000\164\000\166\000\
    \164\000\255\255\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\255\255\255\255\255\255\
    \255\255\166\000\184\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\166\000\166\000\166\000\
    \166\000\166\000\166\000\166\000\166\000\184\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\199\000\255\255\
    \184\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\255\255\255\255\255\255\255\255\
    \199\000\255\255\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\199\000\199\000\199\000\199\000\
    \199\000\199\000\199\000\199\000\201\000\255\255\255\255\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\255\255\255\255\255\255\255\255\201\000\255\255\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\201\000\201\000\201\000\201\000\201\000\201\000\
    \201\000\201\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 119 "xml_lexer.mll"
  (
			newline lexbuf;
			token lexbuf
		)
# 546 "xml_lexer.ml"

  | 1 ->
# 124 "xml_lexer.mll"
  (
			last_pos := lexeme_end lexbuf;
			token lexbuf
		)
# 554 "xml_lexer.ml"

  | 2 ->
# 129 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			ignore_spaces lexbuf;
			let root = ident_name lexbuf in
			ignore_spaces lexbuf;
			let data = dtd_data lexbuf in
			DocType (root, data)
		)
# 566 "xml_lexer.ml"

  | 3 ->
# 138 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			PCData (cdata lexbuf)
		)
# 575 "xml_lexer.ml"

  | 4 ->
# 145 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			comment lexbuf;
			token lexbuf
		)
# 584 "xml_lexer.ml"

  | 5 ->
# 151 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			header lexbuf;
			token lexbuf;
		)
# 593 "xml_lexer.ml"

  | 6 ->
# 157 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			let tag = ident_name lexbuf in
			ignore_spaces lexbuf;
			close_tag lexbuf;
			Endtag tag
		)
# 604 "xml_lexer.ml"

  | 7 ->
# 165 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			let tag = ident_name lexbuf in
			ignore_spaces lexbuf;
			let attribs, closed = attributes lexbuf in
			Tag(tag, attribs, closed)
		)
# 615 "xml_lexer.ml"

  | 8 ->
# 173 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			Buffer.add_string tmp (lexeme lexbuf);
			PCData (pcdata lexbuf)
		)
# 625 "xml_lexer.ml"

  | 9 ->
# 180 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			Buffer.add_string tmp (entity lexbuf);
			PCData (pcdata lexbuf)
		)
# 635 "xml_lexer.ml"

  | 10 ->
# 187 "xml_lexer.mll"
  (
			last_pos := lexeme_start lexbuf;
			Buffer.reset tmp;
			Buffer.add_string tmp (lexeme lexbuf);
			PCData (pcdata lexbuf)
		)
# 645 "xml_lexer.ml"

  | 11 ->
# 193 "xml_lexer.mll"
       ( Eof )
# 650 "xml_lexer.ml"

  | 12 ->
# 195 "xml_lexer.mll"
  ( error lexbuf ENodeExpected )
# 655 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and ignore_spaces lexbuf =
    __ocaml_lex_ignore_spaces_rec lexbuf 30
and __ocaml_lex_ignore_spaces_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 199 "xml_lexer.mll"
  (
			newline lexbuf;
			ignore_spaces lexbuf
		)
# 669 "xml_lexer.ml"

  | 1 ->
# 204 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 674 "xml_lexer.ml"

  | 2 ->
# 206 "xml_lexer.mll"
  ( () )
# 679 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_ignore_spaces_rec lexbuf __ocaml_lex_state

and comment lexbuf =
    __ocaml_lex_comment_rec lexbuf 33
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 210 "xml_lexer.mll"
  (
			newline lexbuf;
			comment lexbuf
		)
# 693 "xml_lexer.ml"

  | 1 ->
# 215 "xml_lexer.mll"
  ( () )
# 698 "xml_lexer.ml"

  | 2 ->
# 217 "xml_lexer.mll"
  ( raise (Error EUnterminatedComment) )
# 703 "xml_lexer.ml"

  | 3 ->
# 219 "xml_lexer.mll"
  ( comment lexbuf )
# 708 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and header lexbuf =
    __ocaml_lex_header_rec lexbuf 40
and __ocaml_lex_header_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 223 "xml_lexer.mll"
  (
			newline lexbuf;
			header lexbuf
		)
# 722 "xml_lexer.ml"

  | 1 ->
# 228 "xml_lexer.mll"
  ( () )
# 727 "xml_lexer.ml"

  | 2 ->
# 230 "xml_lexer.mll"
  ( error lexbuf ECloseExpected )
# 732 "xml_lexer.ml"

  | 3 ->
# 232 "xml_lexer.mll"
  ( header lexbuf )
# 737 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_header_rec lexbuf __ocaml_lex_state

and cdata lexbuf =
    __ocaml_lex_cdata_rec lexbuf 46
and __ocaml_lex_cdata_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 236 "xml_lexer.mll"
  (
			Buffer.add_string tmp (lexeme lexbuf);
			cdata lexbuf
		)
# 751 "xml_lexer.ml"

  | 1 ->
# 241 "xml_lexer.mll"
  (
			newline lexbuf;
			Buffer.add_string tmp (lexeme lexbuf);
			cdata lexbuf
		)
# 760 "xml_lexer.ml"

  | 2 ->
# 247 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 765 "xml_lexer.ml"

  | 3 ->
# 249 "xml_lexer.mll"
  (
			Buffer.add_string tmp (lexeme lexbuf);
			cdata lexbuf
		)
# 773 "xml_lexer.ml"

  | 4 ->
# 254 "xml_lexer.mll"
  ( error lexbuf ECloseExpected )
# 778 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_cdata_rec lexbuf __ocaml_lex_state

and pcdata lexbuf =
    __ocaml_lex_pcdata_rec lexbuf 53
and __ocaml_lex_pcdata_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 259 "xml_lexer.mll"
  (
			Buffer.add_string tmp (lexeme lexbuf);
			pcdata lexbuf
		)
# 792 "xml_lexer.ml"

  | 1 ->
# 264 "xml_lexer.mll"
  (
			Buffer.add_string tmp (lexeme lexbuf);
			pcdata lexbuf;
		)
# 800 "xml_lexer.ml"

  | 2 ->
# 269 "xml_lexer.mll"
  (
			Buffer.add_string tmp (entity lexbuf);
			pcdata lexbuf
		)
# 808 "xml_lexer.ml"

  | 3 ->
# 274 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 813 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_pcdata_rec lexbuf __ocaml_lex_state

and entity lexbuf =
    __ocaml_lex_entity_rec lexbuf 57
and __ocaml_lex_entity_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 279 "xml_lexer.mll"
  (
			let ident = lexeme lexbuf in
			try
				Hashtbl.find idents (String.lowercase ident)
			with
				Not_found -> "&" ^ ident
		)
# 830 "xml_lexer.ml"

  | 1 ->
# 287 "xml_lexer.mll"
  ( raise (Error EUnterminatedEntity) )
# 835 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_entity_rec lexbuf __ocaml_lex_state

and ident_name lexbuf =
    __ocaml_lex_ident_name_rec lexbuf 62
and __ocaml_lex_ident_name_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 291 "xml_lexer.mll"
  ( lexeme lexbuf )
# 846 "xml_lexer.ml"

  | 1 ->
# 293 "xml_lexer.mll"
  ( error lexbuf EIdentExpected )
# 851 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_ident_name_rec lexbuf __ocaml_lex_state

and close_tag lexbuf =
    __ocaml_lex_close_tag_rec lexbuf 65
and __ocaml_lex_close_tag_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 297 "xml_lexer.mll"
  ( () )
# 862 "xml_lexer.ml"

  | 1 ->
# 299 "xml_lexer.mll"
  ( error lexbuf ECloseExpected )
# 867 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_close_tag_rec lexbuf __ocaml_lex_state

and attributes lexbuf =
    __ocaml_lex_attributes_rec lexbuf 68
and __ocaml_lex_attributes_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 303 "xml_lexer.mll"
  ( [], false )
# 878 "xml_lexer.ml"

  | 1 ->
# 305 "xml_lexer.mll"
  ( [], true )
# 883 "xml_lexer.ml"

  | 2 ->
# 307 "xml_lexer.mll"
  (
			let key = attribute lexbuf in
			let data = attribute_data lexbuf in
			ignore_spaces lexbuf;
			let others, closed = attributes lexbuf in
			(key, data) :: others, closed
		)
# 894 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_attributes_rec lexbuf __ocaml_lex_state

and attribute lexbuf =
    __ocaml_lex_attribute_rec lexbuf 72
and __ocaml_lex_attribute_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 317 "xml_lexer.mll"
  ( lexeme lexbuf )
# 905 "xml_lexer.ml"

  | 1 ->
# 319 "xml_lexer.mll"
  ( error lexbuf EAttributeNameExpected )
# 910 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_attribute_rec lexbuf __ocaml_lex_state

and attribute_data lexbuf =
    __ocaml_lex_attribute_data_rec lexbuf 75
and __ocaml_lex_attribute_data_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 323 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			last_pos := lexeme_end lexbuf;
			dq_string lexbuf
		)
# 925 "xml_lexer.ml"

  | 1 ->
# 329 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			last_pos := lexeme_end lexbuf;
			q_string lexbuf
		)
# 934 "xml_lexer.ml"

  | 2 ->
# 335 "xml_lexer.mll"
  ( error lexbuf EAttributeValueExpected )
# 939 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_attribute_data_rec lexbuf __ocaml_lex_state

and dq_string lexbuf =
    __ocaml_lex_dq_string_rec lexbuf 83
and __ocaml_lex_dq_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 339 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 950 "xml_lexer.ml"

  | 1 ->
# 341 "xml_lexer.mll"
  (
			Buffer.add_char tmp (lexeme_char lexbuf 1);
			dq_string lexbuf
		)
# 958 "xml_lexer.ml"

  | 2 ->
# 346 "xml_lexer.mll"
  ( raise (Error EUnterminatedString) )
# 963 "xml_lexer.ml"

  | 3 ->
# 348 "xml_lexer.mll"
  ( 
			Buffer.add_char tmp (lexeme_char lexbuf 0);
			dq_string lexbuf
		)
# 971 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dq_string_rec lexbuf __ocaml_lex_state

and q_string lexbuf =
    __ocaml_lex_q_string_rec lexbuf 89
and __ocaml_lex_q_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 355 "xml_lexer.mll"
  ( Buffer.contents tmp )
# 982 "xml_lexer.ml"

  | 1 ->
# 357 "xml_lexer.mll"
  (
			Buffer.add_char tmp (lexeme_char lexbuf 1);
			q_string lexbuf
		)
# 990 "xml_lexer.ml"

  | 2 ->
# 362 "xml_lexer.mll"
  ( raise (Error EUnterminatedString) )
# 995 "xml_lexer.ml"

  | 3 ->
# 364 "xml_lexer.mll"
  ( 
			Buffer.add_char tmp (lexeme_char lexbuf 0);
			q_string lexbuf
		)
# 1003 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_q_string_rec lexbuf __ocaml_lex_state

and dtd_data lexbuf =
    __ocaml_lex_dtd_data_rec lexbuf 95
and __ocaml_lex_dtd_data_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 371 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			(* skipping Public ID *)
			let _ = dtd_file lexbuf in
			let file = dtd_file lexbuf in
			dtd_end_decl lexbuf;
			DTDFile file
		)
# 1021 "xml_lexer.ml"

  | 1 ->
# 380 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			let file = dtd_file lexbuf in
			dtd_end_decl lexbuf;
			DTDFile file
		)
# 1031 "xml_lexer.ml"

  | 2 ->
# 387 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			let data = dtd_intern lexbuf in
			dtd_end_decl lexbuf;
			DTDData data
		)
# 1041 "xml_lexer.ml"

  | 3 ->
# 394 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDDecl )
# 1046 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_data_rec lexbuf __ocaml_lex_state

and dtd_file lexbuf =
    __ocaml_lex_dtd_file_rec lexbuf 110
and __ocaml_lex_dtd_file_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 398 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let s = dq_string lexbuf in
			ignore_spaces lexbuf;
			s
		)
# 1062 "xml_lexer.ml"

  | 1 ->
# 405 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let s = q_string lexbuf in
			ignore_spaces lexbuf;
			s
		)
# 1072 "xml_lexer.ml"

  | 2 ->
# 412 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDDecl )
# 1077 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_file_rec lexbuf __ocaml_lex_state

and dtd_intern lexbuf =
    __ocaml_lex_dtd_intern_rec lexbuf 114
and __ocaml_lex_dtd_intern_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 416 "xml_lexer.mll"
  ( 
			ignore_spaces lexbuf;
			[]
		)
# 1091 "xml_lexer.ml"

  | 1 ->
# 421 "xml_lexer.mll"
  (
			let l = dtd_item lexbuf in
			l @ (dtd_intern lexbuf)
		)
# 1099 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_intern_rec lexbuf __ocaml_lex_state

and dtd lexbuf =
    __ocaml_lex_dtd_rec lexbuf 116
and __ocaml_lex_dtd_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 428 "xml_lexer.mll"
  ( [] )
# 1110 "xml_lexer.ml"

  | 1 ->
# 430 "xml_lexer.mll"
  (
			newline lexbuf;
			dtd lexbuf
		)
# 1118 "xml_lexer.ml"

  | 2 ->
# 435 "xml_lexer.mll"
  ( dtd lexbuf )
# 1123 "xml_lexer.ml"

  | 3 ->
# 437 "xml_lexer.mll"
  (
			let l = dtd_item lexbuf in
			l @ (dtd lexbuf)
		)
# 1131 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_rec lexbuf __ocaml_lex_state

and dtd_end_decl lexbuf =
    __ocaml_lex_dtd_end_decl_rec lexbuf 120
and __ocaml_lex_dtd_end_decl_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 444 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 1142 "xml_lexer.ml"

  | 1 ->
# 446 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDDecl )
# 1147 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_end_decl_rec lexbuf __ocaml_lex_state

and dtd_item lexbuf =
    __ocaml_lex_dtd_item_rec lexbuf 123
and __ocaml_lex_dtd_item_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 450 "xml_lexer.mll"
  (
			comment lexbuf;
			[];
		)
# 1161 "xml_lexer.ml"

  | 1 ->
# 455 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			let t = dtd_item_type lexbuf in
			let name = (try ident_name lexbuf with Error EIdentExpected -> raise (DTDError EInvalidDTDDecl)) in
			ignore_spaces lexbuf;
			match t with
			| TElement -> [ DTDElement (name , (dtd_element_type lexbuf)) ]
			| TAttribute -> List.map (fun (attrname,atype,adef) -> DTDAttribute (name, attrname, atype, adef)) (dtd_attributes lexbuf)
		)
# 1174 "xml_lexer.ml"

  | 2 ->
# 465 "xml_lexer.mll"
  (  dtd_error lexbuf EDTDItemExpected )
# 1179 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_item_rec lexbuf __ocaml_lex_state

and dtd_attributes lexbuf =
    __ocaml_lex_dtd_attributes_rec lexbuf 129
and __ocaml_lex_dtd_attributes_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 469 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			[]
		)
# 1193 "xml_lexer.ml"

  | 1 ->
# 474 "xml_lexer.mll"
  (
			let attrname = (try ident_name lexbuf with Error EIdentExpected -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			let atype = dtd_attr_type lexbuf in
			let adef = dtd_attr_default lexbuf in
			let a = (attrname, atype, adef) in
			a :: (dtd_attributes lexbuf)
		)
# 1205 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_attributes_rec lexbuf __ocaml_lex_state

and dtd_item_type lexbuf =
    __ocaml_lex_dtd_item_type_rec lexbuf 131
and __ocaml_lex_dtd_item_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 485 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			TElement
		)
# 1219 "xml_lexer.ml"

  | 1 ->
# 490 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			TAttribute
		)
# 1227 "xml_lexer.ml"

  | 2 ->
# 495 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDTag )
# 1232 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_item_type_rec lexbuf __ocaml_lex_state

and dtd_element_type lexbuf =
    __ocaml_lex_dtd_element_type_rec lexbuf 147
and __ocaml_lex_dtd_element_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 499 "xml_lexer.mll"
  ( 
			ignore_spaces lexbuf;
			dtd_end_element lexbuf;
			DTDAny
		)
# 1247 "xml_lexer.ml"

  | 1 ->
# 505 "xml_lexer.mll"
  ( 
			ignore_spaces lexbuf;
			dtd_end_element lexbuf;
			DTDEmpty
		)
# 1256 "xml_lexer.ml"

  | 2 ->
# 511 "xml_lexer.mll"
  (
			try
				let item = Xml_parser.dtd_element dtd_element_token lexbuf in
				ignore_spaces lexbuf;
				DTDChild item
			with
				Parsing.Parse_error -> dtd_error lexbuf EInvalidDTDElement
		)
# 1268 "xml_lexer.ml"

  | 3 ->
# 520 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDElement )
# 1273 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_element_type_rec lexbuf __ocaml_lex_state

and dtd_end_element lexbuf =
    __ocaml_lex_dtd_end_element_rec lexbuf 158
and __ocaml_lex_dtd_end_element_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 524 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 1284 "xml_lexer.ml"

  | 1 ->
# 526 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDElement )
# 1289 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_end_element_rec lexbuf __ocaml_lex_state

and dtd_end_attribute lexbuf =
    __ocaml_lex_dtd_end_attribute_rec lexbuf 161
and __ocaml_lex_dtd_end_attribute_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 530 "xml_lexer.mll"
  ( ignore_spaces lexbuf )
# 1300 "xml_lexer.ml"

  | 1 ->
# 532 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1305 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_end_attribute_rec lexbuf __ocaml_lex_state

and dtd_element_token lexbuf =
    __ocaml_lex_dtd_element_token_rec lexbuf 164
and __ocaml_lex_dtd_element_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 536 "xml_lexer.mll"
  (
			newline lexbuf;
			dtd_element_token lexbuf
		)
# 1319 "xml_lexer.ml"

  | 1 ->
# 541 "xml_lexer.mll"
  ( dtd_element_token lexbuf )
# 1324 "xml_lexer.ml"

  | 2 ->
# 543 "xml_lexer.mll"
  ( OPEN )
# 1329 "xml_lexer.ml"

  | 3 ->
# 545 "xml_lexer.mll"
  ( CLOSE )
# 1334 "xml_lexer.ml"

  | 4 ->
# 547 "xml_lexer.mll"
  ( NEXT )
# 1339 "xml_lexer.ml"

  | 5 ->
# 549 "xml_lexer.mll"
  ( END )
# 1344 "xml_lexer.ml"

  | 6 ->
# 551 "xml_lexer.mll"
  ( OR )
# 1349 "xml_lexer.ml"

  | 7 ->
# 553 "xml_lexer.mll"
  ( PCDATA )
# 1354 "xml_lexer.ml"

  | 8 ->
# 555 "xml_lexer.mll"
  ( STAR )
# 1359 "xml_lexer.ml"

  | 9 ->
# 557 "xml_lexer.mll"
  ( PLUS )
# 1364 "xml_lexer.ml"

  | 10 ->
# 559 "xml_lexer.mll"
  ( QUESTION )
# 1369 "xml_lexer.ml"

  | 11 ->
# 561 "xml_lexer.mll"
  ( IDENT (lexeme lexbuf) )
# 1374 "xml_lexer.ml"

  | 12 ->
# 563 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDElement )
# 1379 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_element_token_rec lexbuf __ocaml_lex_state

and dtd_attr_type lexbuf =
    __ocaml_lex_dtd_attr_type_rec lexbuf 184
and __ocaml_lex_dtd_attr_type_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 567 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDCData
		)
# 1393 "xml_lexer.ml"

  | 1 ->
# 572 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDNMToken
		)
# 1401 "xml_lexer.ml"

  | 2 ->
# 577 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDEnum (dtd_attr_enum lexbuf)
		)
# 1409 "xml_lexer.ml"

  | 3 ->
# 582 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1414 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_attr_type_rec lexbuf __ocaml_lex_state

and dtd_attr_enum lexbuf =
    __ocaml_lex_dtd_attr_enum_rec lexbuf 199
and __ocaml_lex_dtd_attr_enum_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 586 "xml_lexer.mll"
  (
			let v = lexeme lexbuf in
			ignore_spaces lexbuf;
			v :: (dtd_attr_enum_next lexbuf)
		)
# 1429 "xml_lexer.ml"

  | 1 ->
# 592 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1434 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_attr_enum_rec lexbuf __ocaml_lex_state

and dtd_attr_enum_next lexbuf =
    __ocaml_lex_dtd_attr_enum_next_rec lexbuf 202
and __ocaml_lex_dtd_attr_enum_next_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 596 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			[]
		)
# 1448 "xml_lexer.ml"

  | 1 ->
# 601 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			dtd_attr_enum lexbuf
		)
# 1456 "xml_lexer.ml"

  | 2 ->
# 606 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1461 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_attr_enum_next_rec lexbuf __ocaml_lex_state

and dtd_attr_default lexbuf =
    __ocaml_lex_dtd_attr_default_rec lexbuf 206
and __ocaml_lex_dtd_attr_default_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 610 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try dq_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			DTDDefault v
		)
# 1477 "xml_lexer.ml"

  | 1 ->
# 617 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try q_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			DTDDefault v
		)
# 1487 "xml_lexer.ml"

  | 2 ->
# 624 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDRequired
		)
# 1495 "xml_lexer.ml"

  | 3 ->
# 629 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDImplied
		)
# 1503 "xml_lexer.ml"

  | 4 ->
# 634 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDFixed (dtd_attr_string lexbuf)
		)
# 1511 "xml_lexer.ml"

  | 5 ->
# 639 "xml_lexer.mll"
  (
			ignore_spaces lexbuf;
			DTDDefault (dtd_attr_string lexbuf)
		)
# 1519 "xml_lexer.ml"

  | 6 ->
# 644 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1524 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_attr_default_rec lexbuf __ocaml_lex_state

and dtd_attr_string lexbuf =
    __ocaml_lex_dtd_attr_string_rec lexbuf 238
and __ocaml_lex_dtd_attr_string_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 648 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try dq_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			v
		)
# 1540 "xml_lexer.ml"

  | 1 ->
# 655 "xml_lexer.mll"
  (
			Buffer.reset tmp;
			let v = (try q_string lexbuf with Error EUnterminatedString -> raise (DTDError EInvalidDTDAttribute)) in
			ignore_spaces lexbuf;
			v
		)
# 1550 "xml_lexer.ml"

  | 2 ->
# 662 "xml_lexer.mll"
  ( dtd_error lexbuf EInvalidDTDAttribute )
# 1555 "xml_lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_dtd_attr_string_rec lexbuf __ocaml_lex_state

;;

